-------------------------------------------------------------------------------
-- History.lua
--
-- Track historical information about auction prices.
-------------------------------------------------------------------------------

local MIN_TIME_BETWEEN_SCANS = 0;
local HALF_LIFE = 604800; -- 1 week
local INDEPENDENT_SCANS = 172800; -- 2 days

-- Retrieve historical price data for an item.
function AuctionLite:GetHistoricalPrice(link)
  local name, _, id, suffix = self:SplitLink(link);
  local info = self.db.factionrealm.prices[id];

  if info == nil then
    -- Check to see whether we're using a database generated by v0.1,
    -- which indexed by name instead of id.  If so, migrate it.
    info = self.db.factionrealm.prices[name];
    if info ~= nil then
      self:SetHistoricalPrice(link, info);
      self.db.factionrealm.prices[name] = nil;
    end
  elseif suffix ~= 0 or info.suffix then
    -- This item has sub-tables, one for each possible suffix.
    if suffix ~= 0 and info.suffix then
      info = info[suffix];
    else
      info = nil;
    end
  end

  if info ~= nil then
    -- Make sure we have the right format.
    self:ValidateHistoricalPrice(info);
  end

  return info;
end

-- Set historical price data for an item.
function AuctionLite:SetHistoricalPrice(link, info)
  local _, _, id, suffix = self:SplitLink(link);

  if suffix == 0 then
    -- This item has no suffix, so just use the id.
    self.db.factionrealm.prices[id] = info;
  else
    -- This item has a suffix, so index by suffix as well.
    local parent = self.db.factionrealm.prices[id];
    if parent == nil or not parent.suffix then
      parent = { suffix = true };
      self.db.factionrealm.prices[id] = parent;
    end
    parent[suffix] = info;
  end
end

-- Make sure that the price data structure is a valid one.
function AuctionLite:ValidateHistoricalPrice(info)
  local field;
  for _, field in ipairs({"price", "listings", "scans", "time", "items"}) do
    if info[field] == nil then
      info[field] = 0;
    end
  end
end

-- Update historical price data for an item given a price (per item) and
-- the number of listings seen in the latest scan.
function AuctionLite:UpdateHistoricalPrice(link, data)
  -- Get the current data.
  local info = self:GetHistoricalPrice(link)

  -- If we have no data for this item, start a new one.
  if info == nil then
    info = { price = 0, listings = 0, scans = 0, time = 0, items = 0 };
    self:SetHistoricalPrice(link, info);
  end

  -- Update the current data with our new data.
  local time = time();
  if info.time + MIN_TIME_BETWEEN_SCANS < time and data.listings > 0 then
    local pastDiscountFactor = 0.5 ^ ((time - info.time) / HALF_LIFE);
    local presentDiscountFactor = 1 - 0.5 ^ ((time - info.time) / INDEPENDENT_SCANS);
    info.price = (data.price * data.listings * presentDiscountFactor +
                  info.price * info.listings * pastDiscountFactor) /
                 (data.listings * presentDiscountFactor +
                  info.listings * pastDiscountFactor);
    info.listings = data.listings * presentDiscountFactor +
                    info.listings * pastDiscountFactor;
    info.items = data.items * presentDiscountFactor + info.items * pastDiscountFactor;
    info.scans = 1 * presentDiscountFactor + info.scans * pastDiscountFactor;
    info.time = time;
  end
end

-- External interface for vendor values.
function AuctionLite:GetVendorValue(arg1)
  local result = nil;

  local id = nil;
  if type(arg1) == "number" then
    id = arg1;
  elseif type(arg1) == "string" then
    _, _, id = self:SplitLink(arg1);
  end

  if id ~= nil then
    result = self.VendorData[id];
  end

  return result;
end

-- External interface for auction values.
function AuctionLite:GetAuctionValue(arg1, arg2)
  local result = nil;

  local link = nil;
  if type(arg1) == "number" then
    if arg2 == nil then
      arg2 = 0;
    end
    link = "|cffffffff|Hitem:" .. arg1 .. ":0:0:0:0:0:" .. arg2 ..
           ":0:0|h[Unknown]|h|r";
  elseif type(arg1) == "string" then
    link = self:RemoveUniqueId(arg1);
  end

  if link ~= nil then
    local hist = self:GetHistoricalPrice(link);
    if hist ~= nil then
      result = hist.price;
    end
  end

  return result;
end
